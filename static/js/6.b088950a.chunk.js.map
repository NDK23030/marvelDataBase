{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/searchForm/SearchForm.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getCharacterByName","_ref3","_callee3","name","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComic","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","comic","_comic$textObjects$","title","pagCount","pageCount","language","textObjects","price","prices","View","imgStyle","_jsxs","className","children","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","initMount","useRef","current","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","addFocusOnItem","forEach","item","classList","remove","add","focus","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","Link","to","resourceURI","substring","CharInfo","charId","skeleton","SearchForm","result","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","decoration"],"mappings":"iGAAe,UAA0B,kC,OCW1BA,IATM,WACjB,OACIC,cAAA,OACIC,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UACzFC,IAAKC,EACLC,IAAI,Y,2EC8DDC,IAnEU,WACrB,IAAAC,ECDoB,WACpB,IAAAC,EAA8BC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,EAA0BL,mBAAS,MAAKM,EAAAJ,YAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GA2BtB,MAAO,CAACH,UAASM,QAzBDC,sBAAW,eAAAC,EAAAC,YAAAC,IAAAC,MAAC,SAAAC,EAAOC,GAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,UAAA,OAAAV,IAAAW,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEjB,OAFmBV,EAAMK,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,MAAOJ,EAAII,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,KAAMH,EAAOG,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,CAAC,eAAgB,oBAE5FlB,GAAW,GAAMqB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGUG,MAAMd,EAAK,CAACC,SAAQC,OAAMC,YAAU,KAAD,EAA5C,IAARC,EAAQK,EAAAM,MAEDC,GAAG,CAADP,EAAAE,KAAA,eACL,IAAIM,MAAM,mBAADC,OAAoBlB,EAAG,cAAAkB,OAAad,EAASe,SAAU,KAAD,UAAAV,EAAAE,KAAA,GAGtDP,EAASgB,OAAO,KAAD,GAEhB,OAFZf,EAAII,EAAAM,KAEV3B,GAAW,GAAOqB,EAAAY,OAAA,SACXhB,GAAI,QAGS,MAHTI,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAEXrB,GAAW,GACXI,EAASiB,EAAAa,GAAEC,SAASd,EAAAa,GAAA,yBAAAb,EAAAe,UAAAzB,EAAA,mBAI3B,gBAAA0B,GAAA,OAAA9B,EAAA+B,MAAA,KAAAnB,YArB0B,GAqBxB,IAIuBhB,QAAOoC,WAFdjC,uBAAY,kBAAMF,EAAS,QAAO,KD1BPoC,GAAvCzC,EAAOL,EAAPK,QAASM,EAAOX,EAAPW,QAASF,EAAKT,EAALS,MAAOoC,EAAU7C,EAAV6C,WAE1BE,EAAW,4CACXC,EAAU,0CAGVC,EAAgB,eAAApC,EAAAC,YAAAC,IAAAC,MAAG,SAAAC,IAAA,IAAAiC,EAAAC,EAAA3B,EAAAC,UAAA,OAAAV,IAAAW,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAA2B,OAApBqB,EAAM1B,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAFlB,IAEgCG,EAAAE,KAAA,EAC9BlB,EAAQ,GAADyB,OAAIW,EAAQ,8BAAAX,OAA6Bc,EAAM,KAAAd,OAAIY,IAAW,KAAD,EAA7E,OAAHG,EAAGxB,EAAAM,KAAAN,EAAAY,OAAA,SACFY,EAAI5B,KAAK6B,QAAQC,IAAIC,IAAoB,wBAAA3B,EAAAe,UAAAzB,OACnD,kBAHqB,OAAAJ,EAAA+B,MAAA,KAAAnB,YAAA,GAKhB8B,EAAY,eAAAC,EAAA1C,YAAAC,IAAAC,MAAG,SAAAyC,EAAOC,GAAE,IAAAP,EAAA,OAAApC,IAAAW,MAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAAA8B,EAAA9B,KAAA,EACRlB,EAAQ,GAADyB,OAAIW,EAAQ,eAAAX,OAAcsB,EAAE,KAAAtB,OAAIY,IAAW,KAAD,EAA1D,OAAHG,EAAGQ,EAAA1B,KAAA0B,EAAApB,OAAA,SACFe,EAAoBH,EAAI5B,KAAK6B,QAAQ,KAAG,wBAAAO,EAAAjB,UAAAe,OAClD,gBAHiBd,GAAA,OAAAa,EAAAZ,MAAA,KAAAnB,YAAA,GAIZmC,EAAkB,eAAAC,EAAA/C,YAAAC,IAAAC,MAAG,SAAA8C,EAAOC,GAAI,IAAAZ,EAAA,OAAApC,IAAAW,MAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,cAAAmC,EAAAnC,KAAA,EACtBlB,EAAQ,GAADyB,OAAIW,EAAQ,oBAAAX,OAAmB2B,EAAI,KAAA3B,OAAIY,IAAW,KAAD,EAAjE,OAAHG,EAAGa,EAAA/B,KAAA+B,EAAAzB,OAAA,SACFY,EAAI5B,KAAK6B,QAAQC,IAAIC,IAAoB,wBAAAU,EAAAtB,UAAAoB,OAChD,gBAH0BG,GAAA,OAAAJ,EAAAjB,MAAA,KAAAnB,YAAA,GAKlByC,EAAY,eAAAC,EAAArD,YAAAC,IAAAC,MAAG,SAAAoD,IAAA,IAAAlB,EAAAC,EAAAkB,EAAA5C,UAAA,OAAAV,IAAAW,MAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,OAAiB,OAAVqB,EAAMmB,EAAAvC,OAAA,QAAAC,IAAAsC,EAAA,GAAAA,EAAA,GAAG,EAACC,EAAAzC,KAAA,EAChBlB,EAAQ,GAADyB,OAAIW,EAAQ,8CAAAX,OAA6Cc,EAAM,KAAAd,OAAIY,IAAW,KAAD,EAA7F,OAAHG,EAAGmB,EAAArC,KAAAqC,EAAA/B,OAAA,SACFY,EAAI5B,KAAK6B,QAAQC,IAAIkB,IAAgB,wBAAAD,EAAA5B,UAAA0B,OAC/C,kBAHiB,OAAAD,EAAAvB,MAAA,KAAAnB,YAAA,GAKZ+C,EAAQ,eAAAC,EAAA3D,YAAAC,IAAAC,MAAG,SAAA0D,EAAOhB,GAAE,IAAAP,EAAA,OAAApC,IAAAW,MAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EACJlB,EAAQ,GAADyB,OAAIW,EAAQ,WAAAX,OAAUsB,EAAE,KAAAtB,OAAIY,IAAW,KAAD,EAAtD,OAAHG,EAAGwB,EAAA1C,KAAA0C,EAAApC,OAAA,SACFgC,EAAgBpB,EAAI5B,KAAK6B,QAAQ,KAAG,wBAAAuB,EAAAjC,UAAAgC,OAC9C,gBAHaE,GAAA,OAAAH,EAAA7B,MAAA,KAAAnB,YAAA,GAKR6B,EAAsB,SAACuB,GACzB,MAAO,CACHnB,GAAImB,EAAKnB,GACTK,KAAMc,EAAKd,KACXe,YAAaD,EAAKC,YAAW,GAAA1C,OAAMyC,EAAKC,YAAYC,MAAM,EAAG,KAAI,OAAQ,6CACzEC,UAAWH,EAAKG,UAAUC,KAAO,IAAMJ,EAAKG,UAAUE,UACtDC,SAAUN,EAAKO,KAAK,GAAGlE,IACvBmE,KAAMR,EAAKO,KAAK,GAAGlE,IACnBoE,OAAQT,EAAKS,OAAOC,QAItBhB,EAAkB,SAACiB,GAAW,IAADC,EAC/B,MAAO,CACH/B,GAAI8B,EAAM9B,GACVgC,MAAOF,EAAME,MACbZ,YAAaU,EAAMV,aAAe,0BAClCa,SAAUH,EAAMI,UAAS,GAAAxD,OAAMoD,EAAMI,UAAS,OAAQ,2CACtDZ,UAAWQ,EAAMR,UAAUC,KAAO,IAAMO,EAAMR,UAAUE,UACxDW,UAA8B,QAApBJ,EAAAD,EAAMM,YAAY,UAAE,IAAAL,OAAA,EAApBA,EAAsBI,WAAY,SAC5CE,MAAOP,EAAMQ,OAAO,GAAGD,MAAK,GAAA3D,OAAMoD,EAAMQ,OAAO,GAAGD,OAAU,kBAIpE,MAAO,CACH1F,UACAI,QACAoC,aACAI,mBACAM,eACAK,qBACAM,eACAM,c,iMEjEO,G,MAAA,IAA0B,qC,OC4DnCyB,EAAO,SAAHpF,GAAgB,IAAXgE,EAAIhE,EAAJgE,KACJd,EAAgDc,EAAhDd,KAAMe,EAA0CD,EAA1CC,YAAaE,EAA6BH,EAA7BG,UAAWG,EAAkBN,EAAlBM,SAAUE,EAAQR,EAARQ,KAC3Ca,EAAW,CAAC,UAAa,SAK7B,MAJiB,wEAAdlB,IACCkB,EAAW,CAAC,UAAa,YAIzBC,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAC9BhH,cAAA,OAAKO,IAAKoF,EAAW1F,MAAO4G,EAAUpG,IAAI,mBAAmBsG,UAAU,oBACvED,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC7BhH,cAAA,KAAG+G,UAAU,mBAAkBC,SAAEtC,IACjC1E,cAAA,KAAG+G,UAAU,oBAAmBC,SAC3BvB,IAELqB,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC7BhH,cAAA,KAAGiH,KAAMnB,EAAUiB,UAAU,sBAAqBC,SAC9ChH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,eAE3BhH,cAAA,KAAGiH,KAAMjB,EAAMe,UAAU,2BAA0BC,SAC/ChH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,qBAQhCE,EAhFI,WACf,IAAAtG,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7B4E,EAAI1E,EAAA,GAAEqG,EAAOrG,EAAA,GACpBsG,EAAmD1G,cAA5CM,EAAOoG,EAAPpG,QAASI,EAAKgG,EAALhG,MAAO8C,EAAYkD,EAAZlD,aAAcV,EAAU4D,EAAV5D,WAErC6D,qBAAU,WACNC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,WACHG,cAAcF,MAGnB,IAEH,IAAMG,EAAe,SAAClC,GAClB2B,EAAQ3B,IAGN8B,EAAa,WACf9D,IACA,IAAMa,EAAKsD,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5D3D,EAAaG,GACRyD,KAAKJ,IAIRK,EAAe3G,EAAQpB,cAACD,IAAY,IAAK,KACzCiI,EAAUhH,EAAUhB,cAACiI,IAAO,IAAK,KACjCC,EAAYlH,GAAWI,EAA+B,KAAtBpB,cAAC4G,EAAI,CAACpB,KAAMA,IAElD,OACIsB,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBe,EACAC,EACAE,EACDpB,eAAA,OAAKC,UAAU,qBAAoBC,SAAA,CAC/BF,eAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,8BACFhH,cAAA,SAAK,4CAGpCA,cAAA,KAAG+G,UAAU,oBAAmBC,SAAC,0BAGjChH,cAAA,UAAQmI,QAASb,EAAaP,UAAU,sBAAqBC,SACzDhH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,aAE3BhH,cAAA,OAAKO,IAAK6H,EAAS3H,IAAI,UAAUsG,UAAU,kC,iDCsE5CsB,G,MAlHE,SAACC,GACd,IAAA1H,EAAgCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAArC2H,EAAQzH,EAAA,GAAE0H,EAAW1H,EAAA,GAC5BI,EAA4CL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAApDuH,EAActH,EAAA,GAAEuH,EAAiBvH,EAAA,GACxCwH,EAA4B9H,mBAAS,KAAI+H,EAAA7H,YAAA4H,EAAA,GAAlC9E,EAAM+E,EAAA,GAAEC,EAASD,EAAA,GACxBE,EAAkCjI,oBAAS,GAAMkI,EAAAhI,YAAA+H,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9B3B,EAA2C1G,cAApCM,EAAOoG,EAAPpG,QAASI,EAAKgG,EAALhG,MAAOwC,EAAgBwD,EAAhBxD,iBAEjBsF,EAAYC,kBAAO,GAEzB9B,qBAAU,WACN,IAAI6B,EAAUE,QAMZ,OAAOC,EAAUxF,GAAQ,GALvBqF,EAAUE,SAAU,IAOzB,IAEH,IAAMC,EAAY,SAACxF,EAAQyF,GACbZ,GAAVY,GACA1F,EAAiBC,GACZiE,KAAKyB,IAGRA,EAAgB,eAAA/H,EAAAC,YAAAC,IAAAC,MAAG,SAAAC,EAAM4H,GAAW,IAAAC,EAAA,OAAA/H,IAAAW,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAClCiH,GAAQ,GACRD,EAAY/G,OAAS,GAA4B,OAAvB+G,EAAY3F,UACtC4F,GAAQ,GAGZjB,EAAY,GAADzF,OAAA2G,YAAKnB,GAAQmB,YAAKF,KAC7Bd,GAAkB,GAClBG,EAAUhF,EAAS,GACnBoF,EAAaQ,GAAM,wBAAAnH,EAAAe,UAAAzB,OACtB,gBAVqB0B,GAAA,OAAA9B,EAAA+B,MAAA,KAAAnB,YAAA,GAYhBuH,EAAWR,iBAAO,IAElBS,EAAiB,SAACvF,GACpBsF,EAASP,QAAQS,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,OAAO,0BACvDL,EAASP,QAAQ/E,GAAI0F,UAAUE,IAAI,uBACnCN,EAASP,QAAQ/E,GAAI6F,SA6CzB,IAAMhE,EA1CN,SAAqBiE,GACjB,IAAMjE,EAAQiE,EAAInG,KAAI,SAAC8F,EAAMM,GACzB,IAAIvD,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBiD,EAAKnE,YACLkB,EAAW,CAAC,UAAc,UAI1B7G,cAACqK,IAAa,CAEVC,QAAS,IACTC,WAAW,aAAYvD,SACvBF,eAAA,MACIC,UAAU,aACVyD,SAAU,EACVC,IAAK,SAAAC,GAAE,OAAIf,EAASP,QAAQgB,GAAKM,GACjCvC,QAAS,WACLG,EAAMqC,eAAeb,EAAKzF,IAC1BuF,EAAeQ,IAEnBQ,UAAW,SAACC,GACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MAClBxC,EAAMqC,eAAeb,EAAKzF,IAC1BuF,EAAeQ,KAErBpD,SAAA,CACEhH,cAAA,OAAKO,IAAKuJ,EAAKnE,UAAWlF,IAAKqJ,EAAKpF,KAAMzE,MAAO4G,IACjD7G,cAAA,OAAK+G,UAAU,aAAYC,SAAE8C,EAAKpF,WAlBrCoF,EAAKzF,OAwBtB,OACIrE,cAAA,MAAI+G,UAAU,aAAYC,SACtBhH,cAAC+K,IAAe,CAACC,UAAW,KAAKhE,SAC5Bd,MAMH+E,CAAY1C,GAEpBR,EAAe3G,EAAQpB,cAACD,IAAY,IAAK,KACzCiI,EAAUhH,IAAYyH,EAAiBzI,cAACiI,IAAO,IAAK,KAE1D,OACInB,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBe,EACAC,EACA9B,EACDlG,cAAA,UACI+G,UAAU,mCACVmE,SAAUzC,EACVxI,MAAO,CAAC,QAAW+I,EAAY,OAAS,SACxCb,QAAS,kBAAMkB,EAAUxF,IAAQmD,SACjChH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,qB,OC/FxBmE,G,MAjBE,WACb,OACIrE,eAAAsE,WAAA,CAAApE,SAAA,CACIhH,cAAA,KAAG+G,UAAU,eAAcC,SAAC,iDAC5BF,eAAA,OAAKC,UAAU,WAAUC,SAAA,CACrBF,eAAA,OAAKC,UAAU,yBAAwBC,SAAA,CACnChH,cAAA,OAAK+G,UAAU,2BACf/G,cAAA,OAAK+G,UAAU,4BAEnB/G,cAAA,OAAK+G,UAAU,0BACf/G,cAAA,OAAK+G,UAAU,0BACf/G,cAAA,OAAK+G,UAAU,kCCuCzBH,G,MAAO,SAAHpF,GAAgB,IAAXgE,EAAIhE,EAAJgE,KACJd,EAAwDc,EAAxDd,KAAMe,EAAkDD,EAAlDC,YAAaE,EAAqCH,EAArCG,UAAWG,EAA0BN,EAA1BM,SAAUE,EAAgBR,EAAhBQ,KAAMC,EAAUT,EAAVS,OACjDY,EAAW,CAAC,UAAa,SAK7B,MAJiB,wEAAdlB,IACCkB,EAAW,CAAC,UAAa,YAIzBC,eAAAsE,WAAA,CAAApE,SAAA,CACIF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACzBhH,cAAA,OAAKO,IAAKoF,EACLlF,IAAKiE,EACLzE,MAAO4G,IACZC,eAAA,OAAAE,SAAA,CACIhH,cAAA,OAAK+G,UAAU,kBAAiBC,SAAEtC,IAClCoC,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACvBhH,cAAA,KAAGiH,KAAMnB,EAAUiB,UAAU,sBAAqBC,SAC9ChH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,eAE3BhH,cAAA,KAAGiH,KAAMjB,EAAMe,UAAU,2BAA0BC,SAC/ChH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,oBAKvChH,cAAA,OAAK+G,UAAU,cAAaC,SACvBvB,IAELzF,cAAA,OAAK+G,UAAU,eAAcC,SAAC,YAC9BF,eAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5Bf,EAAOxD,OAAS,EAAI,KAAO,yCAExBwD,EAAOjC,KAAI,SAAC8F,EAAMM,GAEd,KAAGA,EAAI,GACP,OACIpK,cAACqL,IAAI,CAACC,GAAE,WAAAvI,OAAa+G,EAAKyB,YAAYC,UAAU,KAC1CzE,UAAU,oBAAmBC,SAE9B8C,EAAKpF,MADC0F,cAiBxBqB,EAhGE,SAACnD,GACd,IAAA1H,EAAwBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA/B4E,EAAI1E,EAAA,GAAEqG,EAAOrG,EAAA,GAEpBsG,EAAmD1G,cAA5CM,EAAOoG,EAAPpG,QAASI,EAAKgG,EAALhG,MAAO8C,EAAYkD,EAAZlD,aAAcV,EAAU4D,EAAV5D,WAErC6D,qBAAU,WACNC,MAED,CAACgB,EAAMoD,SAEV,IAAMpE,EAAa,WACf,IAAOoE,EAAUpD,EAAVoD,OACHA,IAIJlI,IAEAU,EAAawH,GACR5D,KAAKJ,KAGRA,EAAe,SAAClC,GAClB2B,EAAQ3B,IAGNmG,EAAWnG,GAAQxE,GAAWI,EAAQ,KAAOpB,cAACmL,EAAQ,IACtDpD,EAAe3G,EAAQpB,cAACD,IAAY,IAAK,KACzCiI,EAAUhH,EAAUhB,cAACiI,IAAO,IAAK,KACjCC,EAAYlH,GAAWI,IAAUoE,EAA8B,KAAtBxF,cAAC4G,EAAI,CAACpB,KAAMA,IAE3D,OACIsB,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACtB2E,EACA5D,EACAC,EACAE,M,gBC+BE0D,G,MApEI,WACf,IAAAhL,EAAwBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA/B4E,EAAI1E,EAAA,GAAEqG,EAAOrG,EAAA,GACpBsG,EAAyD1G,cAAlDM,EAAOoG,EAAPpG,QAASI,EAAKgG,EAALhG,MAAOmD,EAAkB6C,EAAlB7C,mBAAoBf,EAAU4D,EAAV5D,WAErCkE,EAAe,SAAClC,GAClB2B,EAAQ3B,IAUNuC,EAAe3G,EAAQpB,cAAA,OAAK+G,UAAU,8BAA6BC,SAAChH,cAACD,IAAY,MAAW,KAC5F8L,EAAUrG,EAAcA,EAAK/C,OAAS,EAC5BqE,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACjCF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAE,mBAAiBxB,EAAK,GAAGd,KAAK,YACrE1E,cAACqL,IAAI,CACDC,GAAE,eAAAvI,OAAiByC,EAAK,GAAGnB,IAC3B0C,UAAU,2BAA0BC,SACpChH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,iBAG/BhH,cAAA,OAAK+G,UAAU,qBAAoBC,SAAC,8DAT7B,KAavB,OACIF,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAC9BhH,cAAC8L,IAAM,CACHC,cAAe,CACXC,SAAU,IAEdC,iBAAkBC,IAAW,CACzBF,SAAUE,MAAaC,SAAS,4BAEpCC,SAAU,SAAA5K,GAAiB,IA9BnBkD,EA8BIsH,EAAQxK,EAARwK,SA9BJtH,EA+BOsH,EA9BvBxI,IAEAe,EAAmBG,GACdoD,KAAKJ,IA4BAV,SACFF,eAACuF,IAAI,CAAArF,SAAA,CACDhH,cAAA,SAAOsM,QAAQ,WAAWvF,UAAU,qBAAoBC,SAAC,iCACzDF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACjChH,cAACuM,IAAK,CACFlI,GAAG,WACHK,KAAK,WACL8H,KAAK,OACLC,YAAY,eAChBzM,cAAA,UACIwM,KAAK,SACLzF,UAAU,sBACVmE,SAAUlK,EAAQgG,SAClBhH,cAAA,OAAK+G,UAAU,QAAOC,SAAC,cAG/BhH,cAAC0M,IAAkB,CACf1B,UAAU,MACVjE,UAAU,qBACVrC,KAAK,kBAGhBmH,EACA9D,OCzEE,MAA0B,mCCsC1B4E,UA5BE,WACb,IAAA/L,EAAgCC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAAvCgM,EAAY9L,EAAA,GAAEqG,EAAOrG,EAAA,GAM5B,OACIgG,eAAAsE,WAAA,CAAApE,SAAA,CACIF,eAAC+F,IAAM,CAAA7F,SAAA,CACHhH,cAAA,QACI0E,KAAK,cACLwD,QAAQ,8BACZlI,cAAA,SAAAgH,SAAO,0BAEXhH,cAACkH,EAAU,IACXJ,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC1BhH,cAACqI,EAAQ,CAACsC,eAdC,SAACtG,GACpB8C,EAAQ9C,MAcAyC,eAAA,OAAAE,SAAA,CACIhH,cAACyL,EAAQ,CAACC,OAAQkB,IAClB5M,cAAC4L,EAAU,UAGnB5L,cAAA,OAAK+G,UAAU,gBAAgBxG,IAAKuM,EAAYrM,IAAI","file":"static/js/6.b088950a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} \r\n            src={img} \r\n            alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=ced3e950ab7b0771ee39544916a43456';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n            pagCount: comic.pageCount ? `${comic.pageCount} p.` : \"No information about the number of pages\",\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects[0]?.language || \"en-rus\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}` : \"not avaliable\"\r\n        };\r\n    }\r\n\r\n    return {\r\n        loading, \r\n        error, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getCharacterByName,\r\n        getAllComics,\r\n        getComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;"," import {useState, useCallback} from \"react\"\r\n\r\n export const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n        \r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n }","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 30000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n\n    }\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar}  className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit': 'cover'};\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types'\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    const initMount = useRef(true);\n    \n    useEffect(() => {\n        if (initMount.current) {\n            initMount.current = false;\n      \n            return;\n          }\n      \n          return onRequest(offset, true);\n          // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9 || newCharList.offset === 1559) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const addFocusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition\n                    key={item.id}\n                    timeout={500}\n                    classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            addFocusOnItem(i);\n                        }}\n                        onKeyDown={(e) => {\n                            if(e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                addFocusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n\n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit': 'cover'};\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail}\n                     alt={name}\n                     style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if(i > 9) return;\n                        return (\n                            <Link to={`/comics/${item.resourceURI.substring(43)}`}\n                                  className=\"char__comics-item\"\n                                  key={i}>\n                                {item.name}\n                            </Link>\n                        )\n                    })\n                }\n\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './searchForm.scss';\r\n\r\nconst SearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage/></div> : null;\r\n    const result = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\" >There is! Visit {char[0].name} page?</div>\r\n                        <Link \r\n                            to={`/characters/${char[0].id}`}\r\n                            className='button button__secondary'>\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => {\r\n                    updateChar(charName);\r\n                }}>\r\n                <Form>\r\n                    <label htmlFor=\"charName\" className=\"char__search-label\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className='button button__main'\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage\r\n                        component=\"div\"\r\n                        className=\"char__search-error\"\r\n                        name=\"charName\"/>\r\n                </Form>\r\n            </Formik>\r\n            {result}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\"\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport SearchForm from \"../searchForm/SearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta \r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            <RandomChar/>\r\n            <div className=\"char__content\">\r\n                <CharList onCharSelected={onCharSelected}/>\r\n                <div>\r\n                    <CharInfo charId={selectedChar}/>\r\n                    <SearchForm/>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}